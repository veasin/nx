<?php
/**
 * Created by PhpStorm.
 * User: Vea
 * Date: 2019/04/19 019
 * Time: 10:44
 */
use nx\helpers\db\sql\part;

class partTest extends PHPUnit\Framework\TestCase{
	/**
	 * @var \nx\helpers\db\sql
	 */
	public $from =null;
	public function setUp(){
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->from =new \nx\helpers\db\sql('user');
		$this->from->collectParams =false;
	}
	public function testValue(){
		$part =new \nx\helpers\db\sql\part(1, 'value', $this->from);
		$this->assertEquals('1', (string)$part);

		$part =new \nx\helpers\db\sql\part('1', 'value', $this->from);
		$this->assertEquals('"1"', (string)$part);

		$part =new \nx\helpers\db\sql\part('abc', 'value', $this->from);
		$this->assertEquals('"abc"', (string)$part);

		$part =new \nx\helpers\db\sql\part('abc', 'value', $this->from);
		$this->assertEquals('"abc" `name`', (string)$part->as('name'));
	}
	public function testValueFromTable(){
		$part =($this->from)('123');
		$this->assertEquals('"123"', (string)$part);
	}
	public function testField(){
		$part=new \nx\helpers\db\sql\part('id', 'field', $this->from);
		$this->assertEquals('`user`.`id`', (string)$part);

		$part=new \nx\helpers\db\sql\part(123, 'field', $this->from);
		$this->assertEquals('`user`.`123`', (string)$part);
	}
	public function testFieldFromTable(){
		$part =$this->from['id'];
		$this->assertEquals('`user`.`id`', (string)$part);
	}
	public function testFunction(){
		$name ="sum";
		$part=new \nx\helpers\db\sql\part($name, 'function', $this->from);
		$this->assertEquals(strtoupper($name).'()', (string)$part);

		$part=new \nx\helpers\db\sql\part($name, 'function', $this->from);
		$part->arguments('*');
		$this->assertEquals(strtoupper($name).'(*)', (string)$part);

		$part=new \nx\helpers\db\sql\part($name, 'function', $this->from);
		$part->arguments('*', 'abc', 123);
		$this->assertEquals(strtoupper($name).'(*, "abc", 123)', (string)$part);

		$user =$this->from;
		$part=new \nx\helpers\db\sql\part($name, 'function', $this->from);
		$part->arguments($user['id'], $user['score']);
		$this->assertEquals(strtoupper($name).'(`user`.`id`, `user`.`score`)', (string)$part);
	}
	public function testFunctionFromSQL(){
		$user =$this->from;

		$part =\nx\helpers\db\sql::YEAR($user('2019-04-19'));
		$this->assertEquals('YEAR("2019-04-19")', (string)$part);

		$part =\nx\helpers\db\sql::YEAR($user['createdAt']);
		$this->assertEquals('YEAR(`user`.`createdAt`)', (string)$part);

		$part =\nx\helpers\db\sql::SUM($user['*']);
		$this->assertEquals('SUM(`user`.*)', (string)$part);
	}
	public function testFunctionLink(){
		$user =$this->from;

		$part =$user['createdAt']->UNIX_TIMESTAMP()->YEAR('Y');
		$this->assertEquals('YEAR(UNIX_TIMESTAMP(`user`.`createdAt`), "Y")', (string)$part);

		$part =$user['createdAt']->UNIX_TIMESTAMP()->YEAR('Y')->and($user['updatedAt']->MONTH()->equal(4));
		$this->assertEquals('(YEAR(UNIX_TIMESTAMP(`user`.`createdAt`), "Y") AND MONTH(`user`.`updatedAt`) = 4)', (string)$part);
	}
	public function testFunction2(){
		$part =\nx\helpers\db\sql::operate(1, 2);
		$this->assertEquals('1 = 2', (string)$part);

		$part =\nx\helpers\db\sql::operate(1, 2, '>');
		$this->assertEquals('1 > 2', (string)$part);

		$part =\nx\helpers\db\sql::operate(1, 2, '>=');
		$this->assertEquals('1 >= 2', (string)$part);

		$part =\nx\helpers\db\sql::operate(1, 2, 'NOT LIKE');
		$this->assertEquals('1 NOT LIKE 2', (string)$part);

		$part =\nx\helpers\db\sql::operate("1", 2, 'and');
		$this->assertEquals('"1" AND 2', (string)$part);

		$part =\nx\helpers\db\sql::and("1", 2);
		$this->assertEquals('("1" AND 2)', (string)$part);

		$part =\nx\helpers\db\sql::between(2, 1,3);
		$this->assertEquals('2 BETWEEN 1 AND 3', (string)$part);

		$part =\nx\helpers\db\sql::between(1, 2,3, true);
		$this->assertEquals('1 NOT BETWEEN 2 AND 3', (string)$part);

		$part =\nx\helpers\db\sql::in(1, 1, 2, 3);
		$this->assertEquals('1 IN (1,2,3)', (string)$part);

		$part =\nx\helpers\db\sql::notIn(1, 1, 2, 3);
		$this->assertEquals('1 NOT IN (1,2,3)', (string)$part);

		$part =\nx\helpers\db\sql::IFIF(true, 'true', 'false');//(string)true =1;
		$this->assertEquals('IF(TRUE, "true", "false")', (string)$part);

		$part =\nx\helpers\db\sql::IFIF(null, 'true', 'false');
		$this->assertEquals('IF(NULL, "true", "false")', (string)$part);

		$part =\nx\helpers\db\sql::IFIF('*', '\*', 'no');
		$this->assertEquals('IF(*, "*", "no")', (string)$part);

		$part =\nx\helpers\db\sql::TRIM(' 123 ');
		$this->assertEquals('TRIM(BOTH FROM " 123 ")', (string)$part);

		$part =\nx\helpers\db\sql::TRIM(' 123 ', 'x', 'TRAILING');
		$this->assertEquals('TRIM(TRAILING "x" FROM " 123 ")', (string)$part);

		$part =\nx\helpers\db\sql::WEIGHT_STRING('abc', null, 'char');
		$this->assertEquals('WEIGHT_STRING("abc" AS CHAR())', (string)$part);

		$part =\nx\helpers\db\sql::WEIGHT_STRING('abc', 4, 'byte');
		$this->assertEquals('WEIGHT_STRING("abc" AS BYTE(4))', (string)$part);

	}
}
